'use client';

import { useState, useEffect } from 'react';
import { validateSlugFormat, autoGenerateSlug } from '@/lib/slug';

interface SlugInputProps {
  value: string;
  onChange: (value: string) => void;
  sourceText?: string; // Text to auto-generate slug from (e.g., title, name)
  placeholder?: string;
  label?: string;
  required?: boolean;
  maxLength?: number;
  showPreview?: boolean;
  previewBaseUrl?: string;
  disabled?: boolean;
  error?: string;
  className?: string;
}

export default function SlugInput({
  value,
  onChange,
  sourceText,
  placeholder = 'Enter slug',
  label = 'Slug',
  required = false,
  maxLength = 100,
  showPreview = true,
  previewBaseUrl = '',
  disabled = false,
  error,
  className = ''
}: SlugInputProps) {
  const [internalValue, setInternalValue] = useState(value);
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const [validationError, setValidationError] = useState<string>('');

  // Sync with external value
  useEffect(() => {
    setInternalValue(value);
  }, [value]);

  // Auto-generate slug from source text
  useEffect(() => {
    if (sourceText && (!internalValue || isAutoGenerated)) {
      const newSlug = autoGenerateSlug(sourceText, maxLength);
      setInternalValue(newSlug);
      setIsAutoGenerated(true);
      onChange(newSlug);
    }
  }, [sourceText, internalValue, isAutoGenerated, maxLength, onChange]);

  // Validate slug on change
  useEffect(() => {
    if (internalValue) {
      const validation = validateSlugFormat(internalValue);
      setValidationError(validation.isValid ? '' : validation.error || '');
    } else {
      setValidationError(required ? 'Slug is required' : '');
    }
  }, [internalValue, required]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value.toLowerCase();
    setInternalValue(newValue);
    setIsAutoGenerated(false); // User is manually editing
    onChange(newValue);
  };

  const handleAutoGenerate = () => {
    if (sourceText) {
      const newSlug = autoGenerateSlug(sourceText, maxLength);
      setInternalValue(newSlug);
      setIsAutoGenerated(true);
      onChange(newSlug);
    }
  };

  const displayError = error || validationError;
  const isValid = !displayError;

  return (
    <div className={`space-y-2 ${className}`}>
      {/* Label and Auto-generate button */}
      <div className="flex items-center justify-between">
        <label className="block text-sm font-medium text-gray-700">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
        {sourceText && (
          <button
            type="button"
            onClick={handleAutoGenerate}
            disabled={disabled}
            className="text-xs text-blue-600 hover:text-blue-800 disabled:text-gray-400"
          >
            Auto-generate
          </button>
        )}
      </div>

      {/* Input field */}
      <div className="relative">
        <input
          type="text"
          value={internalValue}
          onChange={handleChange}
          placeholder={placeholder}
          maxLength={maxLength}
          disabled={disabled}
          className={`
            block w-full px-3 py-2 text-sm rounded-md shadow-sm
            ${isValid
              ? 'border-gray-300 focus:ring-2 focus:ring-[#A96B11] focus:border-transparent'
              : 'border-red-300 focus:ring-2 focus:ring-red-500 focus:border-transparent'
            }
            ${disabled ? 'bg-gray-50 text-gray-500 cursor-not-allowed' : 'bg-white'}
          `}
        />

        {/* Character count */}
        <div className="absolute right-2 top-2 text-xs text-gray-400">
          {internalValue.length}/{maxLength}
        </div>
      </div>

      {/* Preview URL */}
      {showPreview && internalValue && (
        <div className="text-xs text-gray-600">
          <span className="font-medium">Preview URL:</span>{' '}
          <code className="bg-gray-100 px-1 rounded">
            {previewBaseUrl}{previewBaseUrl ? '/' : ''}{internalValue}
          </code>
        </div>
      )}

      {/* Error message */}
      {displayError && (
        <p className="text-sm text-red-600">{displayError}</p>
      )}

      {/* Help text */}
      {!displayError && (
        <p className="text-xs text-gray-500">
          Only lowercase letters, numbers, and hyphens. No spaces or special characters.
        </p>
      )}
    </div>
  );
}